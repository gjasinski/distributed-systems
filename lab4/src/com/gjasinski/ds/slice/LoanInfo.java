// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `ClientBankInterface.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.gjasinski.ds.slice;

public class LoanInfo implements java.lang.Cloneable,
                                 java.io.Serializable
{
    public double loanBaseCurrency;

    public double loanForeignCurrency;

    public CurrencyType currencyType;

    public double exchangeRate;

    public double loanValue;

    public LoanInfo()
    {
        this.currencyType = CurrencyType.PLN;
    }

    public LoanInfo(double loanBaseCurrency, double loanForeignCurrency, CurrencyType currencyType, double exchangeRate, double loanValue)
    {
        this.loanBaseCurrency = loanBaseCurrency;
        this.loanForeignCurrency = loanForeignCurrency;
        this.currencyType = currencyType;
        this.exchangeRate = exchangeRate;
        this.loanValue = loanValue;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        LoanInfo r = null;
        if(rhs instanceof LoanInfo)
        {
            r = (LoanInfo)rhs;
        }

        if(r != null)
        {
            if(this.loanBaseCurrency != r.loanBaseCurrency)
            {
                return false;
            }
            if(this.loanForeignCurrency != r.loanForeignCurrency)
            {
                return false;
            }
            if(this.currencyType != r.currencyType)
            {
                if(this.currencyType == null || r.currencyType == null || !this.currencyType.equals(r.currencyType))
                {
                    return false;
                }
            }
            if(this.exchangeRate != r.exchangeRate)
            {
                return false;
            }
            if(this.loanValue != r.loanValue)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::com::gjasinski::ds::slice::LoanInfo");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, loanBaseCurrency);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, loanForeignCurrency);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, currencyType);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, exchangeRate);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, loanValue);
        return h_;
    }

    public LoanInfo clone()
    {
        LoanInfo c = null;
        try
        {
            c = (LoanInfo)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeDouble(this.loanBaseCurrency);
        ostr.writeDouble(this.loanForeignCurrency);
        CurrencyType.ice_write(ostr, this.currencyType);
        ostr.writeDouble(this.exchangeRate);
        ostr.writeDouble(this.loanValue);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.loanBaseCurrency = istr.readDouble();
        this.loanForeignCurrency = istr.readDouble();
        this.currencyType = CurrencyType.ice_read(istr);
        this.exchangeRate = istr.readDouble();
        this.loanValue = istr.readDouble();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, LoanInfo v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public LoanInfo ice_read(com.zeroc.Ice.InputStream istr)
    {
        LoanInfo v = new LoanInfo();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<LoanInfo> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, LoanInfo v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<LoanInfo> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(LoanInfo.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final LoanInfo _nullMarshalValue = new LoanInfo();

    public static final long serialVersionUID = 7998739905894937227L;
}
